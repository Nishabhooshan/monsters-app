{"version":3,"sources":["component/card-list/card/card-component.jsx","component/card-list/card-list-component.jsx","component/card-list/search-box/search-box-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["cardComponent","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAgBgBA,EAbM,SAAAC,GACpB,OACE,sBAAKC,UAAU,iBAAf,UACI,qBACFC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,+BAAKL,EAAMI,QAAQE,KAAnB,OACA,kCAAKN,EAAMI,QAAQG,aCIVC,EAVG,SAAAR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCIVM,G,MAVG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OACE,uBAAOZ,UAAW,SAClBa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCCG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAiBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAYd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAM/C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,8CAEA,cAAC,EAAD,CACAW,YAAa,iBACbC,aAAee,KAAKf,eAEpB,cAAC,EAAD,CAAUJ,SAAUoB,W,GApCVI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8da4fdb7.chunk.js","sourcesContent":["import React from 'react'\n\nimport \"./card-styles.css\"\nconst cardComponent = props => {\n  return (\n    <div className=\"card-container\">\n        <img\n      alt='monster'\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n    />\n      <h1>{props.monster.name} </h1>\n      <p> {props.monster.email}</p>\n    </div>\n  )\n}\n\nexport default  cardComponent","import React from 'react'\nimport \"./card-list-styles.css\"\nimport  Card from \"./card/card-component\"\n\n\nconst CardList  = props => {\n  return (\n    <div className='card-list'>\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n  )\n}\n\nexport default CardList","import React from 'react'\nimport \"./serach-box-styles.css\"\n\nconst SearchBox = ({placeholder, handleChange}) => {\n  return (\n    <input className= \"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n  )\n}\n\nexport default SearchBox\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./component/card-list/card-list-component\";\nimport SearchBox from \"./component/card-list/search-box/search-box-component\"\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    \n  }\n\n  \n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>MONSTERS APP</h1>\n\n        <SearchBox\n        placeholder= \"Search-Monster\"\n        handleChange ={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}